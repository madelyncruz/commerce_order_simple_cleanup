<?php

/**
 * @file
 *
 * Delete abandoned commerce orders by order status on run cron.
 */

/**
 * Implements hook_help().
 */
function commerce_order_simple_cleanup_help($path, $arg) {
  switch ($path) {
    case 'admin/help#commerce_order_simple_cleanup':
      $output = '<p>' . t('The Commerce Order Simple Cleanup module provides ability to delete old orders.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_cron().
 *
 * @todo Perform task.
 *
 * @see _commerce_order_simple_cleanup_run
 *
 */
function commerce_order_simple_cleanup_cron() {
  // Get the time.
  $time = variable_get('commerce_order_simple_cleanup_time');
  // Get the status.
  $status = variable_get('commerce_order_simple_cleanup_status');

  // Execute _commerce_order_simple_cleanup_run
  if (!empty($time) && !empty($status) && array_filter($status)) {
    _commerce_order_simple_cleanup_run($time);
  }
}

/**
 * Implements hook_permission().
 */
function commerce_order_simple_cleanup_permission() {
  return array(
    'administer commerce order simple cleanup' => array(
      'title' => t('Administer Commerce Order Simple Cleanup'),
      'description' => t('Access to configure Commerce Order Simple Cleanup form.'),
    )
  );
}

/**
 * Implements hook_menu().
 */
function commerce_order_simple_cleanup_menu() {
  return array(
    'admin/commerce/config/commerce-order-simple-cleanup' => array(
      'title' => t('Commerce Order Simple Cleanup'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('commerce_order_simple_cleanup_admin_form'),
      'access arguments' => array('administer commerce order simple cleanup'),
      'weight' => 10
    )
  );
}

function commerce_order_simple_cleanup_admin_form($form, &$form_state) {
  // Load the available order statuses.
  $status = _commerce_order_status_options();

  $form['commerce_order_simple_cleanup_status'] = array(
    '#type' => 'checkboxes',
    '#options' => array(1 => t('Enable')),
    '#description' => t('Tick this box to enable commerce order cleanup.'),
    '#default_value' => variable_get('commerce_order_simple_cleanup_status', array()),
  );

  $form['commerce_order_simple_cleanup_order_statuses'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Which status of the orders should be deleted?'),
    '#options' => $status,
    '#required' => TRUE,
    '#default_value' => variable_get('commerce_order_simple_cleanup_order_statuses', array()),
  );

  $form['commerce_order_simple_cleanup_time'] = array(
    '#type' => 'select',
    '#title' => t('How old the orders should be?'),
    '#options' => _commerce_order_simple_cleanup_time_options(),
    '#required' => TRUE,
    '#default_value' => variable_get('commerce_order_simple_cleanup_time'),
  );

  $form['commerce_order_simple_cleanup_limit'] = array(
    '#type' => 'select',
    '#title' => t('How many orders should be deleted?'),
    '#options' => drupal_map_assoc(range(5, 30, 5)),
    '#required' => TRUE,
    '#default_value' => variable_get('commerce_order_simple_cleanup_limit'),
  );

  return system_settings_form($form);
}

function _commerce_order_status_options() {
  $statuses = commerce_order_statuses();

  $excluded_statuses = array('canceled', 'completed', 'pending', 'processing');

  foreach ($statuses as $status) {
    // Convert array to an object properties.
    $status = (object) $status;

    // Skip the completed orders specified in $excluded_statuses.
    // Must be excluded as only the orders in the shopping cart should be deleted.
    if (in_array($status->state, $excluded_statuses)) {
      continue;
    }

    $status_options[$status->name] = $status->title;
  }

  return isset($status_options) ? $status_options : array();
}

function _commerce_order_simple_cleanup_time_options() {
  return array(
    '2 days' => t('2 days above'),
    '3 days' => t('3 days above'),
    '4 days' => t('4 days above'),
    '5 days' => t('5 days above'),
    '6 days' => t('6 days above'),
    '7 days' => t('7 days above'),
  );
}

/**
 * Implements hook_cron().
 */
function _commerce_order_simple_cleanup_run($time) {
  if ($order_statuses = variable_get('commerce_order_simple_cleanup_order_statuses')) {
    // Set the query limit.
    $limit = !empty(variable_get('commerce_order_simple_cleanup_limit')) ? variable_get('commerce_order_simple_cleanup_limit') : 10;

    $query = db_select('commerce_order', 'o')
            ->condition('o.status', $order_statuses, 'IN')
            ->condition('o.changed', strtotime("now -$time"), '<=')
            ->fields('o', array('order_id'))
            ->range(0, $limit);

    if ($results = $query->execute()->fetchAll()) {
      foreach ($results as $result) {
        $order_ids[$result->order_id] = $result->order_id;
      }
    }

    if (isset($order_ids)) {
      commerce_order_delete_multiple($order_ids);
      watchdog('commerce_order_simple_cleanup', '_commerce_order_simple_cleanup_run: The following order IDs has been deleted: = ' . '<pre>' . print_r($order_ids, TRUE) . '</pre>');
    }
  }
}